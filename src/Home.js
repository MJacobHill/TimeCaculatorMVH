import React, { useEffect, useState } from 'react';
import { Text, View, ImageBackground, TextInput, Dimensions, Image, TouchableOpacity, Alert, ScrollView, Modal, StyleSheet, } from 'react-native';
// import AnalogClock from 'react-native-clock-analog';
import moment from 'moment-timezone';
import InternetConnectionAlert from "react-native-internet-connection-alert";

import Clock from './Clock'

import { BannerAd, BannerAdSize, TestIds } from 'react-native-google-mobile-ads';
const adUnitId = __DEV__ ? TestIds.BANNER : 'ca-app-pub-2701884189550059/1580395814';

const WIDTH = Dimensions.get("window").width
const HIEGHT = Dimensions.get("window").height

import auth from '@react-native-firebase/auth';
// import database from '@react-native-firebase/database';
import { firebase } from '@react-native-firebase/database';


// ƒê·ªÉ responsive screen
import { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';




export default function Home({ route, navigation }) {
    const [modalVisible, setModalVisible] = useState(true);
    const [modalVisible2, setModalVisible2] = useState(false);

    const [userId, setUserId] = useState(0);
    const [userName, setUserName] = useState('');
    const [dayTime, setDayTime] = useState('')

    const [minus, setMinus] = useState("0");
    const [plus, setPlus] = useState("0");
    const [toNow, setToNow] = useState('22/02/2022');
    const [toNowCount, setToNowCount] = useState(0);
    const [toDate, setToDate] = useState('22/01/2023');
    const [toDateCount, setToDateCount] = useState(0);

    const [takeToDate, setTakeToDate] = useState(0);
    const [takeSubtraction, setTakeSubtraction] = useState('')
    const [takeSum, setTakeSum] = useState('')
    const [fromNow, setFromNow] = useState('')

    const [isColorForFelling, setIsColorForFelling] = useState('flex')
    const [isShareWithHeart, setIsShareWithHeart] = useState('none')
    const [isSentenceBestWish, setIsSentenceBestWish] = useState('none')
    const [isSentenceWishFun, setIsSentenceWishFun] = useState('none')
    const [isSentenceHeartShared, setIsSentenceHeartShared] = useState('none')
    const [isHeaderHello, setIsHeaderHello] = useState('flex')
    const [isHeader, setIsHeader] = useState('none')

    const [sharedHearts, setSharedHearts] = useState(0)
    // const [dayTime, setDayTime] = useState('20220222'); //ƒê·ªÉ m·∫∑c ƒë·ªãnh l√†  1 ng√†y n√†o ƒë√≥ trong qu√° kh·ª© ƒë·ªÉ ch·∫°y ok

    const [point, setPoint] = useState('');

    const [point1, setPoint1] = useState('');
    const [point2, setPoint2] = useState('');
    const [point3, setPoint3] = useState('');
    const [point4, setPoint4] = useState('');
    const [point5, setPoint5] = useState('');

    const [dayPoint1, setDayPoint1] = useState('');
    const [dayPoint2, setDayPoint2] = useState('');
    const [dayPoint3, setDayPoint3] = useState('');
    const [dayPoint4, setDayPoint4] = useState('');
    const [dayPoint5, setDayPoint5] = useState('');

    const [takeDayPoint1, setTakeDayPoint1] = useState(0);
    const [takeDayPoint2, setTakeDayPoint2] = useState(0);
    const [takeDayPoint3, setTakeDayPoint3] = useState(0);
    const [takeDayPoint4, setTakeDayPoint4] = useState(0);
    const [takeDayPoint5, setTakeDayPoint5] = useState(0);

    const [getColorUsersFeeling, setGetColorUsersFeeling] = useState()

    const [dataColor, setDataColor] = useState([])
    const [dataGiveHeart, setDataGiveHeart] = useState([])
    const [countDataColorFirst, setCountDataColorFirst] = useState(0) //ƒê·ªÉ ch·∫°y 1 l·∫ßn duy nh·∫•t vi·ªác l·∫•y m√†u hi·ªÉn th·ªã chung

    //modal loading 1,5s
    useEffect(() => {
        setTimeout(() => {
            setModalVisible(false)
        }, 1500);
    }, [])


    useEffect(() => {
        checkUserId();
    }, []);

    function checkUserId() {
        auth().onAuthStateChanged(user => {
            if (user != null) {
                //user tr·∫£ v·ªÅ l√† m·ªôt object c√≥ key email ƒëang ƒëƒÉng nh·∫≠p 
                setUserId(user.uid);
            } else {
                console.log('ng∆∞·ªùi d√πng ƒëang ƒëƒÉng xu·∫•t');
            }
        });
    }

    //Khi v√†o L·∫•y d·ªØ li·ªáu ng√†y dayTime tr√™n firebase
    useEffect(() => {
        userId != '' && getDayTime();
    }, [userId]);

    function getDayTime() {
        firebase.database()
            .ref(`users/${userId}/dayTime`)
            .on('value', snapshot => {
                !!snapshot.val() !== false && setDayTime(snapshot.val());
            });
    }

    // Logic n·∫øu kh√¥ng c√πng ng√†y set l·∫°i d·ªØ li·ªáu ng√†y l√† Today v√† gi√° tr·ªã giveheart l√† false 
    useEffect(() => {
        let toDay = moment().format('YYYYMMDD') //ƒê·ªÉ b·ªè b·ªõt hh:mm:ss
        if (`${dayTime}` != '20220222' && `${dayTime}` != `${toDay}` && !!userId != false) { // N·∫øu ng√†y l∆∞u tr√™n firebase kh√°c ng√†y hi·ªán t·∫°i (Kh√¥ng c√πng ng√†y)
            updateDayTime();
        }
    }, [dayTime]);

    function updateDayTime() {
        setDayTime(moment().format('YYYYMMDD'))
        firebase.database().ref(`users/${userId}/dayTime`).set(moment().format('YYYYMMDD'));
        firebase.database().ref(`users/${userId}/giveHeart`).set(false)
    }

    //L·∫•y t√™n c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√≠
    useEffect(() => {
        userId !== 0 && getUserNameInfor(userId)
    }, [userId, userName])
    //Khi userId thay ƒë·ªïi th√¨ render l·∫°i th√¨ get_DATA_Users m·ªõi ho·∫°t ƒë·ªông ƒë√∫ng √Ω ƒë·ªãnh

    function getUserNameInfor(userId) {
        firebase.database().ref(`users/${userId}/userName`).on('value', snapshot => {
            snapshot.val() !== null && setUserName(snapshot.val());
        });
    }


    //L·∫•y Arr m√†u ƒë√£ ch·ªçn c·ªßa users tr√™n firebase
    useEffect(() => {
        if (!!userId !== 0 && countDataColorFirst == 0 && !!getColorUsersFeeling == false) { //Ch·ªâ ch·∫°y m·ªôt l·∫ßn
            get_DataColor_Users()
            setGetColorUsersFeeling(array_unique_Exist_Most(dataColor)) //L·∫•y ra m√†u c√≥ s·ªë l·∫ßn nhi·ªÅu nh·∫•t vd m√†u #fff
        }
    }, [userId, dataColor]);

    const get_DataColor_Users = () => {
        let query = firebase.database().ref('users/').orderByChild('color')
        query.once('value', function (snapshot) {
            let array = [];
            snapshot.forEach(function (childSnapshot) {
                var childData = childSnapshot.val();
                if (childData.color != undefined) {
                    array.push(
                        childData.color,
                    );
                }
            });
            console.log("arrayOfColor: ", array);
            setDataColor(array)
        });
    }


    //T√¨m ra ph·∫ßn t·ª≠ xu·∫•t hi·ªán nhi·ªÅu l·∫ßn nh·∫•t
    function array_unique_Exist_Most(array) {
        array.sort(); // X·∫Øp x·∫øp l·∫°i theo quy t·∫Øc abc
        let max = [0, 0];
        //S·ª≠ d·ª•ng v√≤ng l·∫∑p for ƒë·ªÉ l·ªçc ra c√°c ph·∫ßn t·ª≠ xu·∫•t hi·ªán nhi·ªÅu h∆°n 1 l·∫ßn
        //So s√°nh s·ªë l·∫ßn xu·∫•t hi·ªán v√† thay ƒë·ªïi max khi c·∫ßn.
        let count = 1;
        for (let i = 0; i < array.length; i++) {
            if (array[i] === array[i + 1]) ++count; //Th·∫•y ph·∫ßn t·ª≠ tr√πng nhau th√¨ ti·∫øp t·ª•c ƒë·∫øm
            //N·∫øu th·∫•y ph·∫ßn t·ª≠ kh√°c nhau th√¨ so s√°nh t·ªïng h·ª£p r·ªìi ƒë·∫øm ph·∫ßn t·ª≠ ti·∫øp
            else {
                //So s√°nh s·ªë l·∫ßn xu·∫•t hi·ªán v·ªõi max[1] 
                if (max[1] < count) {
                    //N·∫øu t√¨m th·∫•y ph·∫ßn t·ª≠ xu·∫•t hi·ªán nhi·ªÅu h∆°n th√¨ g√°n ph·∫ßn t·ª≠ v√†o max[0]
                    //V√† g√°n s·ªë l·∫ßn xu·∫•t hi·ªán v√†o max[1]
                    max[0] = array[i];
                    max[1] = count;
                }
                count = 1;
            }
        }
        // console.log("Ph·∫ßn t·ª≠ " + max[0] + " xu·∫•t hi·ªán nhi·ªÅu nh·∫•t v·ªõi " + max[1] + " l·∫ßn");
        return max[0]
    }

    //Up tim chia s·∫ª
    function updateDataBaseHeartShared() {
        if (userId) {
            firebase.database().ref(`users/${userId}/giveHeart`).set(true)
        }
    }


    //L·∫•y d·ªØ li·ªáu "tim" M·ªçi ng∆∞·ªùi ƒë√£ chia s·∫ª ƒë·∫øn nh·ªØng ng∆∞·ªùi mang t√¢m tr·∫°ng nh·∫•t //L·∫•y c·∫£ d·ªØ li·ªáu qu√° kh·ª© c·ªßa ng∆∞·ªùi chia s·∫ª t·ª´ l·∫ßn cu·ªëi h·ªç d√πng v√† chia s·∫ª
    useEffect(() => {
        if (userId) {
            get_DataOfHeart_Users()
        }
    }, [userId])

    const get_DataOfHeart_Users = () => {
        let toDay = moment().format('YYYYMMDD') //Ng√†y hi·ªán t·∫°i ( b·ªè b·ªõt hh:mm:ss)
        let query = firebase.database().ref('users/').orderByChild('giveHeart')
        query.once('value', function (snapshot) {
            let array = [];
            snapshot.forEach(function (childSnapshot) {
                var childData = childSnapshot.val();
                if (childData.giveHeart != undefined) {
                    array.push(
                        childData.giveHeart,
                    );
                }
            });
            console.log("arrayOfGiveHeart: ", array);
            setDataGiveHeart(array)
        });
    }


    //ƒê·∫øm s·ªë heart ƒë∆∞·ª£c share b·ªüi users kh√°c
    useEffect(() => {
        var count = 0;
        for (var i = 0; i < dataGiveHeart.length; ++i) { if (dataGiveHeart[i] == true) count++; }
        setSharedHearts(count)
        // console.log("üöÄ ~ file: Home.js ~ line 219 ~ useEffect ~ count", count)
    }, [dataGiveHeart])


    //Update m√†u ƒëc ch·ªçn nhi·ªÅu nh·∫•t c·ªßa users, set Count l√† 1 ƒë·ªÉ ko b·ªã ch·∫°y l·∫°i n·ªØa, set Hi·ªÉn th·ªã c√¢u wishFun sau 8s n·∫øu b·ªè qua ch·ªçn share
    function updateFirebaseAndShowMediumColor(color) {
        if (userId !== 0) {
            firebase.database().ref(`users/${userId}/color`).set(color)
        }
        //Show ph·∫ßn share tim v·ªõi nh·ªØng ai "sad", settimeout ƒë·ªÉ c·∫£m gi√°c kh√¥ng b·ªã kh√≥ ch·ªãu
        setTimeout(() => {
            if (dataColor.length != 0 && countDataColorFirst == 0) { //ƒë·ªÉ ch·ªâ ch·∫°y m·ªôt l·∫ßn sau khi ƒë√£ show m√†u chung c·ªßa c·∫£m x√∫c
                setCountDataColorFirst(1)
                setIsColorForFelling('none')
                setIsSentenceWishFun('none')
                setIsShareWithHeart('flex')
            }
        }, 500)


        //set n·∫øu 8s ko ch·ªçn th√¨ t·ª± ƒë·ªông t·∫Øt ph·∫ßn shared of heart
        setTimeout(() => {
            setIsShareWithHeart('none')
            setIsSentenceWishFun('flex')
            setIsColorForFelling('none')
        }, 8000); //Kh√¥ng c·∫ßn clear v√¨ v·∫´n c√≥ gi√° tr·ªã ƒë·ªÉ n√≥ set sau 8s


        // Set l·∫°i header khi ƒë√£ ch·ªçn c·∫£m x√∫c
        setTimeout(() => {
            setIsHeaderHello('none')
            setIsHeader('flex')
        }, 500);
    }

    //ƒê·ªÉ khi nh·∫•n n√∫t share tim th√¨ show lu√¥n WishFun
    function showSentencesWishFun() {
        setIsShareWithHeart('none')
        setIsSentenceWishFun('flex')
    }


    //Update firebase, hi·ªÉn th·ªã hearts shared v√† show bestWishes
    function updateFirebaseNotShowMediumColor(color) {
        if (userId !== 0) {
            firebase.database().ref(`users/${userId}/color`).set(color)
        }
        //Set 500ms ƒë·ªÉ smooth c·∫£m nh·∫≠n
        if (sharedHearts != 0) { //N·∫øu c√≥ time m·ªõi hi·ªÉn th·ªã time share
            setTimeout(() => {
                if (dataColor.length != 0 && countDataColorFirst == 0) { //ƒë·ªÉ ch·ªâ ch·∫°y m·ªôt l·∫ßn sau khi ƒë√£ show m√†u chung c·ªßa c·∫£m x√∫c
                    setCountDataColorFirst(1)
                    setIsColorForFelling('none')
                    setIsSentenceHeartShared('flex')
                    setIsSentenceBestWish('none')
                }
            }, 500);
        } else { //hi·ªÉn th·ªã lu√¥n bestwhises n·∫øu kh√¥ng c√≥ time shared
            setTimeout(() => {
                setIsSentenceHeartShared('none')
                setIsSentenceBestWish('flex')
                setIsColorForFelling('none')
            }, 500);
        }


        //Set l·∫°i header khi ƒë√£ ch·ªçn c·∫£m x√∫c, 500ms c√πng l√∫c v·ªõi hi·ªÉn th·ªã hearts shared
        setTimeout(() => {
            setIsHeaderHello('none')
            setIsHeader('flex')
        }, 500);

        //T·ª± ƒë·ªông ƒë√≥ng hi·ªÉn th·ªã hearts shared, hi·ªÉn th·ªã bestwhises sau 5s
        setTimeout(() => {
            setIsSentenceHeartShared('none')
            setIsSentenceBestWish('flex')
            setIsColorForFelling('none')
        }, 4004); //Kh√¥ng c·∫ßn clear v√¨ v·∫´n c√≥ gi√° tr·ªã ƒë·ªÉ n√≥ set sau 4s


    }

    // function showSentencesBestWishesForSad() {
    //     setIsSentenceWishFun('none')
    //     setIsSentenceBestWish('flex')
    // }


    //ƒê·ªÉ t√≠nh to√°n c·ªông tr·ª´ ng√†y, ƒë·∫øm ng√†y nh·∫≠p d·ªØ li·ªáu v√†o t·ª´ textInput
    useEffect(() => {
        let a = moment().subtract(minus, 'days').format('DD/MM/YYYY')
        setTakeSubtraction(a)

        let b = moment().add(plus, 'days').format('DD/MM/YYYY')
        setTakeSum(b)

        if (!!moment(toNow, 'DD/MM/YYYY') == true) {
            let d = moment(toNow, 'DD/MM/YYYY').format(); //ƒë·ªÉ ƒëc d·∫°ng "2022-06-30"
            let djs = new Date(d)
            var msDiff = new Date().getTime() - new Date(d).getTime(); //Future date - current date
            var daysTillTheDay = Math.floor(msDiff / (1000 * 60 * 60 * 24));
            if (djs.getFullYear() >= 1900) { //ƒê·ªÉ nƒÉm lu√¥n > 1900
                setFromNow(daysTillTheDay);
            }
        }
        if (!!moment(toDate, 'DD/MM/YYYY') == true) {
            let d = moment(toDate, 'DD/MM/YYYY').format(); //ƒë·ªÉ ƒëc d·∫°ng "2022-06-30"
            let djs = new Date(d)
            var msDiffd = (new Date().getTime() - new Date(d).getTime()); //Future date - current date
            var daysTillTheDayd = - Math.floor(msDiffd / (1000 * 60 * 60 * 24)); //D·∫•u - ƒë·∫±ng tr∆∞·ªõc l·∫•y d∆∞∆°ng, do math.floor l√†m tr√≤n d∆∞·ªõi n√™n c√≥ th·ªÉ +- 1 ng√†y
            if (djs.getFullYear() >= 1900) {
                setTakeToDate(daysTillTheDayd);
            }
        }
    }, [minus, plus, toNow, toDate])


    //ƒê·ªÉ t√≠nh to√°n c·ªông tr·ª´ ng√†y, ƒë·∫øm ng√†y ph·∫ßn Ho·∫°ch ƒë·ªãnh ƒë·∫øn m·ª•c ti√™u, d·ªØ li·ªáu l·∫•y t·ª´ firebase
    useEffect(() => {
        if (!!moment(dayPoint1, 'DD/MM/YYYY') == true) {
            let d1 = moment(dayPoint1, 'DD/MM/YYYY').format(); //ƒë·ªÉ ƒëc d·∫°ng "2022-06-30"
            var msDiffd1 = new Date(d1).getTime() - new Date().getTime(); //Future date - current date
            var daysTillTheDayd1 = Math.floor(msDiffd1 / (1000 * 60 * 60 * 24));
            setTakeDayPoint1(daysTillTheDayd1);
        }
        if (!!moment(dayPoint2, 'DD/MM/YYYY') == true) {
            let d2 = moment(dayPoint2, 'DD/MM/YYYY').format(); //ƒë·ªÉ ƒëc d·∫°ng "2022-06-30"
            var msDiffd2 = new Date(d2).getTime() - new Date().getTime(); //Future date - current date
            var daysTillTheDayd2 = Math.floor(msDiffd2 / (1000 * 60 * 60 * 24));
            setTakeDayPoint2(daysTillTheDayd2);
        }
        if (!!moment(dayPoint3, 'DD/MM/YYYY') == true) {
            let d3 = moment(dayPoint3, 'DD/MM/YYYY').format(); //ƒë·ªÉ ƒëc d·∫°ng "2022-06-30"
            var msDiffd3 = new Date(d3).getTime() - new Date().getTime(); //Future date - current date
            var daysTillTheDayd3 = Math.floor(msDiffd3 / (1000 * 60 * 60 * 24));
            setTakeDayPoint3(daysTillTheDayd3);
        }
        if (!!moment(dayPoint4, 'DD/MM/YYYY') == true) {
            let d4 = moment(dayPoint4, 'DD/MM/YYYY').format(); //ƒë·ªÉ ƒëc d·∫°ng "2022-06-30"
            var msDiffd4 = new Date(d4).getTime() - new Date().getTime(); //Future date - current date
            var daysTillTheDayd4 = Math.floor(msDiffd4 / (1000 * 60 * 60 * 24));
            // console.log("üöÄ ~ file: Home.js ~ line 209 ~ useEffect ~ daysTillTheDayd4", daysTillTheDayd4)
            setTakeDayPoint4(daysTillTheDayd4);
        }
        if (!!moment(dayPoint5, 'DD/MM/YYYY') == true) {
            let d5 = moment(dayPoint5, 'DD/MM/YYYY').format(); //ƒë·ªÉ ƒëc d·∫°ng "2022-06-30"
            var msDiffd5 = new Date(d5).getTime() - new Date().getTime(); //Future date - current date
            var daysTillTheDayd5 = Math.floor(msDiffd5 / (1000 * 60 * 60 * 24));
            setTakeDayPoint5(daysTillTheDayd5);
        }
    }, [dayPoint1, dayPoint2, dayPoint3, dayPoint4, dayPoint5])


    //get User Data Infor point 1 - 5, dayPoint 1 - 5
    useEffect(() => {
        userId != 0 && getUserDataInfor()
    }, [userId])
    //Khi email thay ƒë·ªïi th√¨ render l·∫°i th√¨ get_DATA_Users m·ªõi ho·∫°t ƒë·ªông ƒë√∫ng √Ω ƒë·ªãnh

    function getUserDataInfor() {
        if (userId) {
            firebase.database().ref(`users/${userId}/point`).on('value', snapshot => {
                snapshot.val() !== null && setPoint(snapshot.val());
            });
            firebase.database().ref(`users/${userId}/point1`).on('value', snapshot => {
                snapshot.val() !== null && setPoint1(snapshot.val());
            });
            firebase.database().ref(`users/${userId}/point2`).on('value', snapshot => {
                snapshot.val() !== null && setPoint2(snapshot.val());
            });
            firebase.database().ref(`users/${userId}/point3`).on('value', snapshot => {
                snapshot.val() !== null && setPoint3(snapshot.val());
            });
            firebase.database().ref(`users/${userId}/point4`).on('value', snapshot => {
                snapshot.val() !== null && setPoint4(snapshot.val());
            });
            firebase.database().ref(`users/${userId}/point5`).on('value', snapshot => {
                snapshot.val() !== null && setPoint5(snapshot.val());
            });
            firebase.database().ref(`users/${userId}/dayPoint1`).on('value', snapshot => {
                snapshot.val() !== null && setDayPoint1(snapshot.val());
            });
            firebase.database().ref(`users/${userId}/dayPoint2`).on('value', snapshot => {
                snapshot.val() !== null && setDayPoint2(snapshot.val());
            });
            firebase.database().ref(`users/${userId}/dayPoint3`).on('value', snapshot => {
                snapshot.val() !== null && setDayPoint3(snapshot.val());
            });
            firebase.database().ref(`users/${userId}/dayPoint4`).on('value', snapshot => {
                snapshot.val() !== null && setDayPoint4(snapshot.val());
            });
            firebase.database().ref(`users/${userId}/dayPoint5`).on('value', snapshot => {
                snapshot.val() !== null && setDayPoint5(snapshot.val());
            });
            //l·∫•y toDate v√† toNow v·ªÅ //Ch·ªâ l·∫•y l·∫ßn ƒë·∫ßu ti√™n sau khi v√†o app
            firebase.database().ref(`users/${userId}/todayToDate`).once('value', snapshot => {
                snapshot.val() !== null && setToDate(snapshot.val());
                setToDateCount(1); //L·∫•y v·ªÅ tr∆∞·ªõc m·ªõi update ƒë∆∞·ª£c l√™n
            }); firebase.database().ref(`users/${userId}/dateToToday`).once('value', snapshot => {
                snapshot.val() !== null && setToNow(snapshot.val());
                setToNowCount(1);
            });
        }
    }


    // signOutUser = async () => {
    //     try {
    //         await auth().signOut()
    //     } catch (e) {
    //         console.log(e)
    //     }
    // }

    //T·∫°o b·∫£ng th√¥ng b√°o ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t
    // const createTwoButtonAlert = () =>
    //     Alert.alert(
    //         "", //Alert Title
    //         "B·∫°n ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t ?",
    //         [
    //             {
    //                 text: "H·ªßy b·ªè",
    //                 onPress: () => console.log("Cancel Pressed"),
    //                 style: "cancel"
    //             },
    //             { text: "OK", onPress: () => signOutUser() }
    //         ]
    //     );


    //Set ƒë·∫øm ng√†y c√°c ƒë√≠ch v·ªÅ 0 khi ƒë√£ v·ªÅ 0 ho·∫∑c √¢m ng√†y
    useEffect(() => {
        if (takeDayPoint1 <= 0) { //Ch√∫ √Ω tr√°nh tr∆∞·ªùng h·ª£p l·∫∑p l·∫°i v√¥ h·∫°n l·∫ßn !
            setTakeDayPoint1(0)
        }
        if (takeDayPoint2 <= 0) {
            setTakeDayPoint2(0)
        }
        if (takeDayPoint3 <= 0) {
            setTakeDayPoint3(0)
        }
        if (takeDayPoint4 <= 0) {
            setTakeDayPoint4(0)
        }
        if (takeDayPoint5 <= 0) {
            setTakeDayPoint5(0)
        }
    }, [takeDayPoint1, takeDayPoint2, takeDayPoint3, takeDayPoint4, takeDayPoint5])


    //L∆∞u toDate, toNow l√™n firebase
    useEffect(() => {
        if (userId && toDateCount != 0) { //ƒêi·ªÅu ki·ªán sau ƒë·ªÉ tr√°nh t·∫°o v√≤ng l·∫∑p khi b·∫Øt ƒë·∫ßu ch·∫°y, l·∫ßn ƒë·∫ßu ti√™n s·∫Ω ko up l√™n firebase
            firebase.database().ref(`users/${userId}/todayToDate`).set(toDate)
        }
        if (userId && toNowCount != 0) {
            firebase.database().ref(`users/${userId}/dateToToday`).set(toNow)
        }
    }, [toNow, toDate])






    return (
        <InternetConnectionAlert
            onChange={(connectionState) => {
                console.log("Connection State: ", connectionState);
            }}
        >
            {/* {... Your whole application should be here ... } */}
            <View style={{ height: '100%', width: WIDTH, alignItems: 'center', justifyContent: 'center', backgroundColor: '#ecf0f1', padding: 0, paddingHorizontal: 0 }}>
                <ImageBackground
                    source={require('./background.jpg')}
                    imageStyle={{ opacity: 0.9 }}
                    style={{ height: '100%', width: WIDTH, }}>
                    <View style={{ height: '100%', }}>
                        {/* Hi·ªÉn th·ªã ph·∫ßn logo v√† c√¢u h·ªèi c·∫£m x√∫c m·ªü ƒë·∫ßu */}
                        <View style={{ display: isHeaderHello, height: HIEGHT * 0.096, width: WIDTH, backgroundColor: 'rgba(255, 250, 240, 0.99)', paddingTop: 1, paddingLeft: 8, margin: 0, justifyContent: 'center', }}>
                            <View style={{ flexDirection: 'row', width: WIDTH, alignItems: 'center', margin: 0 }}>
                                <View
                                    // onPress={createTwoButtonAlert}
                                    style={{ padding: hp('0.5%'), borderRadius: 50 }}
                                >
                                    <Image
                                        allowFontScaling={false}
                                        source={require('./imges/iconTimeCalculator1.png')}
                                        style={{ width: WIDTH * 0.12, height: WIDTH * 0.12, borderRadius: 50, backgroundColor: 'rgba(250, 250, 250)', position: 'relative', bottom: hp('-0.5%') }}
                                        resizeMode="contain"
                                    />
                                </View>

                                <Text
                                    allowFontScaling={false}
                                    numberOfLines={1}
                                    adjustsFontSizeToFit
                                    style={{ marginLeft: wp('0.5%'), color: '#FF1493', fontSize: hp('2.5%'), fontWeight: 'bold', position: 'relative', bottom: hp('-1.5%') }}>
                                    {`Xin ch√†o ${userName}, b·∫°n ·ªïn ch·ª©?`}
                                </Text>
                            </View>
                            <Text
                                allowFontScaling={false}
                                numberOfLines={1}
                                adjustsFontSizeToFit
                                style={{ color: '#FF1493', fontSize: hp('2.2%'), fontWeight: 'bold', marginLeft: wp('15%'), marginBottom: hp('1%'), position: 'relative', bottom: 2 }}>
                                C√πng m·ªçi ng∆∞·ªùi chia s·∫ª nh√©!
                            </Text>
                        </View>

                        {/* Hi·ªÉn th·ªã ph·∫ßn logo v√† c√¢u h·ªèi c·∫£m x√∫c m·ªü ƒë·∫ßu khi ƒë√£ ch·ªçn m√†u c·∫£m x√∫c */}
                        <View style={{ display: isHeader, flexDirection: 'row', height: HIEGHT * 0.096, width: WIDTH, backgroundColor: 'rgba(255, 250, 240, 0.99)', justifyContent: 'center', alignItems: 'center' }}>
                            <View
                                // onPress={createTwoButtonAlert}
                            >
                                <Image
                                    allowFontScaling={false}
                                    source={require('./imges/iconTimeCalculator1.png')}
                                    style={{ width: hp('8%'), height: hp('8%'), padding: 0, backgroundColor: '#FFF', borderRadius: 50, }}
                                    resizeMode="contain"
                                />
                            </View>
                            <Text
                                allowFontScaling={false}
                                numberOfLines={1}
                                adjustsFontSizeToFit
                                style={{ color: '#555', fontSize: hp('3.2%'), fontWeight: 'bold', marginLeft: wp('1.5%'), position: "relative", top: hp('1%') }}>
                                Time Calculator
                            </Text>
                            <Text
                                allowFontScaling={false}
                                numberOfLines={1}
                                adjustsFontSizeToFit
                                style={{ color: '#333', fontSize: hp('2%'), fontWeight: 'bold', marginLeft: wp('2%'), }}>
                                v.1.2
                            </Text>
                        </View>


                        {/* Hi·ªÉn th·ªã ph·∫ßn ch·ªçn m√†u c·∫£m x√∫c - v√† m√†u ƒëa s·ªë ƒë∆∞·ª£c ch·ªçn */}
                        <View style={{ height: HIEGHT * 0.096, width: WIDTH, alignItems: 'center', justifyContent: 'center', }}>
                            <View style={{ display: isColorForFelling, flexDirection: 'row', height: '100%' }}>
                                <TouchableOpacity
                                    onPress={() => updateFirebaseAndShowMediumColor('#FFA500')}
                                    style={{ paddingVertical: 2, opacity: 0.95, backgroundColor: '#FFA500', width: '20%', alignItems: 'center', justifyContent: 'center' }}
                                >
                                    <Text
                                        allowFontScaling={false}
                                        numberOfLines={3}
                                        adjustsFontSizeToFit
                                        style={{ fontSize: hp('2.3%'), color: 'yellow', paddingHorizontal: 2, textAlign: 'center', fontWeight: 'bold' }}>r·∫•t vui, h·∫°nh ph√∫c</Text>
                                </TouchableOpacity>
                                <TouchableOpacity
                                    onPress={() => updateFirebaseAndShowMediumColor('#FFFF00')}
                                    style={{ paddingVertical: 2, opacity: 0.9, backgroundColor: '#FFFF00', width: '20%', alignItems: 'center', justifyContent: 'center' }}
                                >
                                    <Text
                                        allowFontScaling={false}
                                        numberOfLines={2}
                                        adjustsFontSizeToFit
                                        style={{ fontSize: hp('2.3%'), color: '#fff', paddingHorizontal: 2, textAlign: 'center', fontWeight: 'bold' }}>vui v·∫ª</Text>
                                </TouchableOpacity>
                                <TouchableOpacity
                                    onPress={() => updateFirebaseAndShowMediumColor('#FFF')}
                                    style={{ paddingVertical: 2, opacity: 0.8, backgroundColor: '#FFF', width: '20%', alignItems: 'center', justifyContent: 'center' }}
                                >
                                    <Text
                                        allowFontScaling={false}
                                        numberOfLines={2}
                                        adjustsFontSizeToFit
                                        style={{ fontSize: hp('2.3%'), color: '#FFFAFA', paddingHorizontal: 2, textAlign: 'center', fontWeight: 'bold' }}>b√¨nh th∆∞·ªùng</Text>
                                </TouchableOpacity>
                                <TouchableOpacity
                                    onPress={() => updateFirebaseNotShowMediumColor('#0000FF')}
                                    style={{ paddingVertical: 2, opacity: 0.6, backgroundColor: '#0000FF', width: '20%', alignItems: 'center', justifyContent: 'center' }}
                                >
                                    <Text
                                        allowFontScaling={false}
                                        style={{ fontSize: hp('2.3%'), color: '#fff', paddingHorizontal: 2, opacity: 0.8, textAlign: 'center', fontWeight: 'bold' }}>bu·ªìn</Text>
                                </TouchableOpacity>
                                <TouchableOpacity
                                    onPress={() => updateFirebaseNotShowMediumColor('#000')}
                                    style={{ paddingVertical: 0.8, backgroundColor: '#000', width: '20%', alignItems: 'center', justifyContent: 'center' }}
                                >
                                    <Text
                                        allowFontScaling={false}
                                        style={{ fontSize: hp('2.3%'), color: '#fff', paddingHorizontal: 2, opacity: 0.22, textAlign: 'center', fontWeight: 'bold' }}>r·∫•t bu·ªìn</Text>
                                </TouchableOpacity>
                            </View>

                            <View style={{ display: isShareWithHeart, backgroundColor: getColorUsersFeeling != "#000" ? getColorUsersFeeling : 'rgba(0, 0, 0, 0.3)', opacity: 0.9, width: WIDTH, height: '100%', justifyContent: 'center', alignItems: 'center' }}>
                                <View style={{ flexDirection: 'row', width: WIDTH, justifyContent: 'center', alignItems: 'center', }}>
                                    <Text
                                        allowFontScaling={false}
                                        numberOfLines={2}
                                        adjustsFontSizeToFit
                                        style={{ textAlign: 'center', marginLeft: hp('2.5%'), width: WIDTH * 0.8, fontSize: hp('2.2%'), fontWeight: 'bold', color: '#555', }}>
                                        {`C√≥ b·∫°n ƒëang bu·ªìn, b·∫°n c√≥ mu·ªën chia s·∫ª t√¢m tr·∫°ng c√πng h·ªç`}
                                    </Text>
                                    <TouchableOpacity
                                        onPress={() => {
                                            showSentencesWishFun()
                                            updateDataBaseHeartShared()
                                        }}
                                        style={{ paddingRight: 0, width: WIDTH * 0.2, }}
                                    >
                                        <Image
                                            allowFontScaling={false}
                                            source={require('./imges/heartNoBackground.png')}
                                            style={{ width: WIDTH * 0.1, height: WIDTH * 0.1, padding: 12, tintColor: '#FF1493', backgroundColor: '#87CEFF', borderRadius: 50 }}
                                            resizeMode="contain"
                                        />
                                    </TouchableOpacity>
                                </View>
                            </View>

                            <View style={{ display: isSentenceHeartShared, backgroundColor: 'rgba(0, 238, 118, 0.2)', width: WIDTH, height: '100%', justifyContent: 'center', alignItems: 'center' }}>
                                <View style={{ flexDirection: 'row', width: WIDTH, justifyContent: 'center', alignItems: 'center', }}>
                                    <Text
                                        allowFontScaling={false}
                                        numberOfLines={2}
                                        adjustsFontSizeToFit
                                        style={{ textAlign: 'center', marginLeft: hp('2.5%'), width: WIDTH * 0.8, fontSize: hp('2.2%'), fontWeight: 'bold', color: '#FF1493', opacity: 0.8, }}>
                                        {` C√≥ ${sharedHearts} tr√°i tim chia s·∫ª, m·ªçi ng∆∞·ªùi xin chia s·∫ª n·ªói bu·ªìn c√πng b·∫°n `}
                                    </Text>
                                    <Image
                                        allowFontScaling={false}
                                        source={require('./imges/heartFullColor.png')}
                                        style={{ width: WIDTH * 0.1, height: WIDTH * 0.1, padding: 12, tintColor: '#FF1493', backgroundColor: '#00EE76', borderRadius: 50, opacity: 0.8 }}
                                        resizeMode="contain"
                                    />
                                </View>
                            </View>

                            <View style={{ paddingHorizontal: 3, display: isSentenceWishFun, backgroundColor: getColorUsersFeeling != "#000" ? getColorUsersFeeling : 'rgba(0, 0, 0, 0.3)', opacity: 0.9, width: WIDTH, height: '100%', paddingVertical: 15, justifyContent: 'center', alignItems: 'center' }}>
                                <Text
                                    allowFontScaling={false}
                                    numberOfLines={1}
                                    adjustsFontSizeToFit
                                    style={{ textAlign: 'center', fontSize: hp('2.3%'), fontWeight: 'bold', color: '#FF1493', opacity: 0.8 }}>
                                    Ch√∫c b·∫°n lu√¥n vui v·∫ª nh√©
                                </Text>
                            </View>

                            <View style={{ paddingHorizontal: 3, display: isSentenceBestWish, backgroundColor: 'rgba(0, 238, 118, 0.2)', width: WIDTH, height: '100%', paddingVertical: 15, justifyContent: 'center', alignItems: 'center' }}>
                                <Text
                                    allowFontScaling={false}
                                    numberOfLines={1}
                                    adjustsFontSizeToFit
                                    style={{ textAlign: 'center', fontSize: hp('2.3%'), fontWeight: 'bold', color: '#FF1493', opacity: 0.4, zIndex: 10 }}>
                                    Mong nh·ªØng ƒëi·ªÅu t·ªët ƒë·∫πp nh·∫•t ƒë·∫øn v·ªõi b·∫°n
                                </Text>
                            </View>
                            {/* <View style={{ display: isShareWithHeart, backgroundColor: 'red', opacity: 0.9, width: WIDTH, justifyContent: 'center', alignItems: 'center', paddingVertical: 0, position: 'relative', height: 0.01, top: 0, }}>
                        </View> */}
                        </View>

                        {/* Hi·ªÉn th·ªã b·∫£ng ch·ª©c nƒÉng t√≠nh ng√†y ƒê·∫øm ng√†y v√† b·∫£ng k·∫øt qu·∫£ v√† B·∫£ng ph·∫ßn ho·∫°ch ƒë·ªãnh ƒë·∫øn ƒë√≠ch */}
                        <View style={{ height: HIEGHT * 0.0096 * 65, alignItems: 'center', justifyContent: 'center' }}>
                            {/* Hi·ªÉn th·ªã b·∫£ng ch·ª©c nƒÉng t√≠nh ng√†y ƒê·∫øm ng√†y v√† b·∫£ng k·∫øt qu·∫£  */}
                            <View style={{ width: WIDTH, height: '45%', justifyContent: 'center', alignItems: 'center', borderRadius: 5, marginLeft: 0, }}>
                                {/* Hi·ªÉn th·ªã ƒë·ªìng h·ªì, ng√†y th√°ng √¢m l·ªãch, d∆∞∆°ng l·ªãch v√† n√∫t sang trang chuy·ªÉn ƒë·ªïi ng√†y d∆∞∆°ng-√¢m l·ªãch */}
                                <View style={{flexDirection: 'row', width: WIDTH, paddingLeft: wp('2%'), marginTop: HIEGHT * 0.03, flexWrap: 'wrap', }}>
                                    {/* ƒê·ªìng h·ªì, ng√†y th√°ng √¢m - d∆∞∆°ng */}
                                    {<Clock />}

                                    <View style = {{height: hp('10%'), width: wp('0.01%')}}>
                                        {/* View l√†m m·ªëc cho ƒëi·ªÉm relative c·ªßa image */}
                                        <TouchableOpacity
                                            onPress={() => { navigation.navigate('CalendarDate') }}
                                            style={{ padding: 0, width: WIDTH * 0.105, position: 'relative', bottom: hp('-4.4%'), left: wp('-11%'), zIndex: 101 }}
                                        >
                                            <Image
                                                allowFontScaling={false}
                                                source={require('./imges/calendarRmbackground.png')}
                                                style={{ width: WIDTH * 0.1, height: WIDTH * 0.1, backgroundColor: '#87CEFF', opacity: 0.9, borderRadius: 50, marginLeft: wp('0%'), }}
                                                resizeMode="contain"
                                            />
                                        </TouchableOpacity>
                                    </View>
                                    

                                </View>

                                <View style={{ backgroundColor: 'rgba(255, 250, 240, 0.95)', borderRadius: 8 }}>
                                    <View style={{ width: wp('0.01%'), height: wp('0.1%') }}>
                                        {/* L√†m m·ªëc cho ·∫£nh Note */}
                                        <TouchableOpacity
                                            onPress={() => { setModalVisible2(!modalVisible2); }}
                                            style={{ width: WIDTH * 0.15, padding: wp('2%'), position: 'relative', bottom: hp('6.5%'), left: wp('1%'), zIndex: 21,  }}>
                                            <Image
                                                allowFontScaling={false}
                                                source={require('./imges/note.png')}
                                                style={{ width: WIDTH * 0.1, height: WIDTH * 0.1, backgroundColor: '#87CEFF', borderRadius: 50, opacity: 0.5 }}
                                                resizeMode="contain"
                                            />
                                        </TouchableOpacity>
                                    </View>

                                    <View style={{ marginVertical: hp('0.5%'), paddingLeft: wp('2%'), width: WIDTH, flexDirection: 'row', alignItems: 'center', }}>
                                        <View style={{ marginLeft: 8, flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap' }}>
                                            <View style={{ maxWidth: wp('30%'), backgroundColor: 'rgba(0, 0, 0, 0.6)', borderRadius: 5, flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'center' }}>
                                                <Text
                                                    allowFontScaling={false}
                                                    numberOfLines={1}
                                                    adjustsFontSizeToFit
                                                    style={{ paddingHorizontal: wp('1.5%'), borderRadius: 5, color: '#FFD700', fontSize: hp('2.5%'), fontWeight: 'bold', }}>
                                                    {`${takeToDate}`}
                                                </Text>
                                                <Text
                                                    allowFontScaling={false}
                                                    numberOfLines={1}
                                                    adjustsFontSizeToFit
                                                    style={{
                                                        paddingRight: wp('0.8%'), color: '#FFD700', fontSize: hp('2.5%'), fontWeight: 'bold',
                                                    }}>
                                                    {`ng√†y`}
                                                </Text>
                                                {/* T√°ch ra ƒë·ªÉ n·∫øu qu√° chi·ªÅu ngang th√¨ xu·ªëng d√≤ng */}
                                            </View>

                                            <Text
                                                allowFontScaling={false}
                                                numberOfLines={1}
                                                adjustsFontSizeToFit
                                                style={{
                                                    paddingLeft: 0, color: '#333', fontSize: hp('2.5%'), fontWeight: 'bold',
                                                }}>
                                                {` n·ªØa ƒë·∫øn ng√†y `}
                                            </Text>
                                        </View>
                                        <View style={{ borderRadius: 5, marginRight: wp('10%'), }}>
                                            <TextInput
                                                allowFontScaling={false}
                                                numberOfLines={1}
                                                adjustsFontSizeToFit
                                                value={toDate}
                                                onChangeText={setToDate}
                                                placeholder="0"
                                                placeholderTextColor="#87CEFF"
                                                style={{
                                                    width: wp('33%'), height: hp('3.5%'), marginHorizontal: wp('0.2%'), paddingHorizontal: wp('1%'), backgroundColor: 'rgba(255, 255, 0, 0.5)', borderRadius: 5, padding: 0, color: '#00BFFF', fontSize: hp('2.7%'), fontWeight: 'bold', zIndex: 1,
                                                }}
                                            />
                                        </View>
                                    </View>

                                    <View style={{ paddingLeft: 18, width: WIDTH, flexDirection: 'row', marginVertical: 0, margin: 0, alignItems: 'center', marginBottom: 0 }}>
                                        <View style={{ flexDirection: 'row', width: WIDTH * 0.65, alignItems: 'center', flexWrap: 'wrap' }}>
                                            <Text
                                                allowFontScaling={false}
                                                style={{
                                                    paddingLeft: 0, marginBottom: hp('0.5%'), color: '#333', fontSize: hp('2.5%'), fontWeight: 'bold'
                                                }}>
                                                {`B·ªõt `}
                                            </Text>
                                            <TextInput
                                                allowFontScaling={false}
                                                value={`${minus}`}
                                                onChangeText={setMinus}
                                                placeholder=""
                                                placeholderTextColor="#87CEFF"
                                                style={{
                                                    with: wp('20%'), height: hp('3.5%'), marginHorizontal: wp('1%'), paddingHorizontal: wp('1%'), backgroundColor: 'rgba(255, 255, 0, 0.5)', borderRadius: 5, padding: 0, color: '#00BFFF', fontSize: hp('2.7%'), fontWeight: 'bold', zIndex: 1,
                                                }}
                                            />
                                            <Text
                                                allowFontScaling={false}
                                                style={{
                                                    paddingLeft: 0, color: '#333', fontSize: hp('2.5%'), fontWeight: 'bold'
                                                }}>
                                                {` ng√†y  l√†:`}
                                            </Text>
                                        </View>
                                        <View style={{ backgroundColor: 'rgba(0, 0, 0, 0.7)', borderRadius: 5, marginRight: 8, width: WIDTH * 0.35, }}>
                                            <Text
                                                allowFontScaling={false}
                                                style={{
                                                    color: '#FFD700', fontSize: hp('2.5%'), margin: 0, paddingHorizontal: 5, paddingVertical: 0, fontWeight: 'bold', width: WIDTH * 0.32
                                                }}>
                                                {takeSubtraction}
                                            </Text>
                                        </View>
                                    </View>

                                    <View style={{ paddingLeft: 18, width: WIDTH, flexDirection: 'row', alignItems: 'center', marginBottom: 0 }}>
                                        <View style={{ flexDirection: 'row', width: WIDTH * 0.65, alignItems: 'center', flexWrap: 'wrap' }}>
                                            <Text
                                                allowFontScaling={false}
                                                style={{
                                                    paddingLeft: 0, color: '#333', fontSize: hp('2.5%'), fontWeight: 'bold'
                                                }}>
                                                {`Th√™m `}
                                            </Text>
                                            <TextInput
                                                allowFontScaling={false}
                                                value={`${plus}`}
                                                onChangeText={setPlus}
                                                placeholder=""
                                                placeholderTextColor="#87CEFF"
                                                style={{
                                                    with: wp('20%'), height: hp('3.5%'), marginHorizontal: wp('1%'), paddingHorizontal: wp('1%'), backgroundColor: 'rgba(255, 255, 0, 0.5)', borderRadius: 5, padding: 0, color: '#00BFFF', fontSize: hp('2.7%'), fontWeight: 'bold', zIndex: 1,
                                                }}
                                            />
                                            <Text
                                                allowFontScaling={false}
                                                style={{
                                                    paddingLeft: 0, color: '#333', fontSize: hp('2.5%'), fontWeight: 'bold'
                                                }}>
                                                {` ng√†y  l√†:`}
                                            </Text>
                                        </View>
                                        <View style={{ backgroundColor: 'rgba(0, 0, 0, 0.7)', borderRadius: 5, marginRight: 8, }}>
                                            <Text
                                                allowFontScaling={false}
                                                style={{
                                                    marginRight: 20, color: '#FFD700', fontSize: hp('2.5%'), margin: 0, paddingHorizontal: 5, paddingRight: 0, fontWeight: 'bold', width: WIDTH * 0.32,
                                                }}>
                                                {takeSum}
                                            </Text>
                                        </View>
                                    </View>

                                    <View style={{ marginVertical: hp('0.5%'), paddingLeft: 18, width: WIDTH, flexDirection: 'row', alignItems: 'center' }}>
                                        <View style={{ width: WIDTH * 0.65, flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', }}>
                                            <Text
                                                allowFontScaling={false}
                                                style={{
                                                    paddingLeft: 0, color: '#333', fontSize: hp('2.5%'), fontWeight: 'bold',
                                                }}>
                                                Ng√†y
                                            </Text>
                                            <TextInput
                                                allowFontScaling={false}
                                                value={toNow}
                                                onChangeText={setToNow}
                                                placeholder=""
                                                placeholderTextColor="#87CEFF"
                                                style={{
                                                    with: wp('20%'), height: hp('3.5%'), marginHorizontal: wp('1%'), paddingHorizontal: wp('1%'), backgroundColor: 'rgba(255, 255, 0, 0.5)', borderRadius: 5, padding: 0, color: '#00BFFF', fontSize: hp('2.7%'), fontWeight: 'bold', zIndex: 1,
                                                }}
                                            />
                                            <Text
                                                allowFontScaling={false}
                                                style={{
                                                    color: '#333', fontSize: hp('2.5%'), fontWeight: 'bold',
                                                }}>
                                                t·ªõi nay:
                                            </Text>
                                        </View>
                                        <View style={{ backgroundColor: 'rgba(0, 0, 0, 0.7)', borderRadius: 5, marginRight: wp('3.2%'), width: WIDTH * 0.35, alignItems: 'center', width: WIDTH * 0.32, }}>
                                            <Text
                                                allowFontScaling={false}
                                                style={{
                                                    lineHeight: hp('3.2%'), color: '#FFD700', fontSize: hp('2.5%'), margin: 0, paddingHorizontal: 5, fontWeight: 'bold', width: WIDTH * 0.32,
                                                }}>
                                                {`${fromNow} ng√†y`}
                                            </Text>
                                        </View>
                                    </View>
                                </View>

                            </View>

                            {/* Hi·ªÉn th·ªã ph·∫ßn ho·∫°ch ƒë·ªãnh ƒë·∫øn ƒë√≠ch */}
                            <ScrollView style={{ width: WIDTH, height: '55%', marginTop: hp('2%') }}>
                                <View style={{ width: WIDTH, flexDirection: 'row', marginBottom: 0, paddingTop: hp('2.5%'), flexWrap: 'wrap', }}>
                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.49, color: '#fff', fontSize: hp('2.3%'), fontWeight: 'bold', paddingLeft: 8, paddingTop: 1
                                        }}>
                                        Ho·∫°ch ƒë·ªãnh ƒë·∫øn ƒë√≠ch:
                                    </Text>

                                    <TouchableOpacity
                                        onPress={() => { navigation.navigate('Points') }}
                                        style={{ width: WIDTH * 0.09, }}>
                                        <Image
                                            allowFontScaling={false}
                                            source={require('./imges/iconExcercise.png')}
                                            style={{ width: WIDTH * 0.1, height: WIDTH * 0.1, backgroundColor: '#87CEFF', borderRadius: 50, position: 'relative', bottom: hp('1.5%'), }}
                                            resizeMode="contain"
                                        />
                                    </TouchableOpacity>

                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.4, color: '#fff', fontSize: hp('2.3%'), fontWeight: 'bold', paddingLeft: 8, paddingVertical: hp('0.01%'), paddingTop: 1
                                        }}>
                                        {`${point}  `}
                                    </Text>

                                </View>

                                <View style={{ flexDirection: 'row', marginBottom: 0, flexWrap: 'wrap', }}>
                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.63, color: '#fff', fontSize: hp('2.2%'), fontWeight: 'bold', paddingLeft: 19, paddingBottom: 1, paddingBottom: 2
                                        }}>
                                        {`C√≤n ${takeDayPoint1} ng√†y ƒë·∫øn ƒë√≠ch 1:`}
                                    </Text>

                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.36, color: '#fff', fontSize: hp('2.2%'), fontWeight: 'bold', paddingLeft: 8, paddingBottom: 1, paddingBottom: 2
                                        }}>
                                        {point1}
                                    </Text>

                                </View>

                                <View style={{ flexDirection: 'row', marginBottom: 0, flexWrap: 'wrap', }}>
                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.63, color: '#fff', fontSize: hp('2.2%'), fontWeight: 'bold', paddingLeft: 19, paddingVertical: 1, marginVertical: 2
                                        }}>
                                        {`C√≤n ${takeDayPoint2} ng√†y ƒë·∫øn ƒë√≠ch 2:`}
                                    </Text>
                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.36, color: '#fff', fontSize: hp('2.2%'), fontWeight: 'bold', paddingLeft: 8, paddingVertical: 1, marginVertical: 2
                                        }}>
                                        {point2}
                                    </Text>

                                </View>

                                <View style={{ flexDirection: 'row', marginBottom: 0, flexWrap: 'wrap', }}>
                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.63, color: '#fff', fontSize: hp('2.2%'), fontWeight: 'bold', paddingLeft: 19, paddingVertical: 1, marginVertical: 2
                                        }}>
                                        {`C√≤n ${takeDayPoint3} ng√†y ƒë·∫øn ƒë√≠ch 3:`}
                                    </Text>
                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.36, color: '#fff', fontSize: hp('2.2%'), fontWeight: 'bold', paddingLeft: 8, paddingVertical: 1, marginVertical: 2
                                        }}>
                                        {point3}
                                    </Text>

                                </View>

                                <View style={{ flexDirection: 'row', marginBottom: 0, flexWrap: 'wrap', }}>
                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.63, color: '#fff', fontSize: hp('2.2%'), fontWeight: 'bold', paddingLeft: 19, paddingVertical: 1, marginVertical: 2
                                        }}>
                                        {`C√≤n ${takeDayPoint4} ng√†y ƒë·∫øn ƒë√≠ch 4:`}
                                    </Text>
                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.36, color: '#fff', fontSize: hp('2.2%'), fontWeight: 'bold', paddingLeft: 8, paddingVertical: 1, marginVertical: 2
                                        }}>
                                        {point4}
                                    </Text>

                                </View>

                                <View style={{ flexDirection: 'row', marginBottom: 0, flexWrap: 'wrap', }}>
                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.63, color: '#fff', fontSize: hp('2.2%'), fontWeight: 'bold', paddingLeft: 19, paddingVertical: 1, marginVertical: 2
                                        }}>
                                        {`C√≤n ${takeDayPoint5} ng√†y ƒë·∫øn ƒë√≠ch 5:`}
                                    </Text>
                                    <Text
                                        allowFontScaling={false}
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, width: WIDTH * 0.36, color: '#fff', fontSize: hp('2.2%'), fontWeight: 'bold', paddingLeft: 8, paddingVertical: 1, marginVertical: 2
                                        }}>
                                        {point5}
                                    </Text>

                                </View>

                                <View style={{ marginVertical: hp('0.5%'), justifyContent: 'center', alignItems: 'center', }}>
                                    <Text
                                        allowFontScaling={false}
                                        numberOfLines={1}
                                        adjustsFontSizeToFit
                                        style={{
                                            textShadowColor: "rgba(0,0,0, 1)",
                                            textShadowRadius: 20, marginBottom: hp('1%'), color: '#FFD700', fontSize: hp('2.25%'), fontWeight: 'bold', paddingTop: 3, paddingBottom: 0
                                        }}>
                                        V∆∞·ª£t c√°c giai ƒëo·∫°n, ho√†n th√†nh m·ª•c ti√™u !
                                    </Text>
                                </View>

                            </ScrollView>
                        </View>

                        {/* Hi·ªÉn th·ªã Modal Loading */}
                        <Modal
                            animationType="fade"
                            transparent={true}
                            visible={modalVisible}
                            onRequestClose={() => {
                                setModalVisible(!modalVisible);
                            }}
                        >
                            <View style={{ width: '100%', height: '100%', justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(255, 255, 255, 0.9)' }}>
                                <View style={{ justifyContent: 'center', alignItems: 'center' }}>
                                    <Image source={require('./imges/Loading2.gif')} style={{ marginHorizontal: 8, width: 80, height: 80, zIndex: 1 }} resizeMode='cover' />
                                </View>
                            </View>
                        </Modal>

                        {/* Hi·ªÉn th·ªã Modal note */}
                        <Modal
                            animationType="fade"
                            transparent={true}
                            visible={modalVisible2}
                            onRequestClose={() => {
                                setModalVisible2(!modalVisible2);
                            }}
                        >
                            <View style={{ width: '100%', height: '100%', justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0, 0, 0, 0.8)' }}>
                                <View style={{}}>
                                    <View style={{width: wp('95%'), backgroundColor: 'rgba(255, 250, 240, 1)', borderRadius: 5, alignItems: 'center', justifyContent: 'center', }}>
                                        <View style={{ marginBottom: hp('2%'), paddingHorizontal: wp('5%'), marginTop: hp('2%') }}>
                                            <Text allowFontScaling={false}  style = {{fontWeight: 'bold', marginVertical: hp('1%')}}>Ghi ch√∫:</Text>
                                            <Text allowFontScaling={false} style = {{marginTop: hp('0.3%')}}>       ƒê·ªãnh d·∫°ng ng√†y d·∫°ng: ng√†y/th√°ng/nƒÉm. V√≠ d·ª•: 22/02/2022</Text>
                                            <Text allowFontScaling={false} style = {{marginTop: hp('0.3%')}}>       N·∫øu vi·∫øt t·∫Øt ng√†y l√† : "15" th√¨ m√°y s·∫Ω hi·ªÉu l√† ng√†y 15 th√°ng v√† nƒÉm hi·ªán t·∫°i. T∆∞∆°ng t·ª± nh·∫≠p t·∫Øt l√† "15/02" th√¨ m√°y s·∫Ω hi·ªÉu nƒÉm l√† nƒÉm hi·ªán t·∫°i.</Text>
                                            <Text allowFontScaling={false} style = {{marginTop: hp('0.3%')}}>       N·∫øu nh·∫≠p nƒÉm t·∫Øt l√† hai s·ªë th√¨ m√°y s·∫Ω th√™m hai s·ªë ƒë·∫ßu l√† 20</Text>
                                            <Text allowFontScaling={false} style = {{marginTop: hp('0.3%')}}>       N·∫øu nh·∫≠p sai c√∫ ph√°p, sai ng√†y ho·∫∑c qu√° ph·∫°m vi t√≠nh th√¨ s·∫Ω gi·ªØ nguy√™n k·∫øt qu·∫£ tr∆∞·ªõc ƒë√≥ !</Text>
                                            <Text allowFontScaling={false} style = {{marginTop: hp('0.5%')}}>       *Trong ph·∫ßn chuy·ªÉn ƒë·ªïi ng√†y d∆∞∆°ng l·ªãch sang ng√†y √¢m l·ªãch: C·∫ßn nh·∫≠p ƒë√∫ng c·∫£ ng√†y, th√°ng, nƒÉm d∆∞∆°ng l·ªãch h·ª£p l·ªá th√¨ m·ªõi chuy·ªÉn ƒë·ªïi ng√†y d∆∞∆°ng l·ªãch sang ng√†y √¢m l·ªãch, kh√¥ng c√≥ ki·ªÉu vi·∫øt t·∫Øt ng√†y, th√°ng, nƒÉm nh∆∞ tr∆∞·ªõc.</Text>
                                        </View>
                                        <TouchableOpacity
                                            style={{ width: wp('25%'), height: hp('5%'), borderColor: 'white', borderWidth: 1, backgroundColor: 'blue', borderRadius: 20, justifyContent: 'center', alignItems: 'center', marginTop: hp('2%'), marginBottom: hp('2%'),}}
                                            onPress={() => setModalVisible2(!modalVisible2)}
                                        >
                                            <Text allowFontScaling={false} style={{  color: 'white', fontSize: hp('2%'), paddingHorizontal: wp('5.5%'), fontWeight: 'bold' , }}>Hide</Text>
                                        </TouchableOpacity>
                                    </View>
                                </View>
                            </View>
                        </Modal>


                        {/* Ph·∫ßn li√™n h·ªá  v√† ƒë·∫∑t qu·∫£ng c√°o*/}
                        <View style={{ height: '15%', alignItems: 'center', flex: 1, }}>
                            <Text
                                allowFontScaling={false}
                                style={{
                                    textShadowColor: "rgba(0,0,0, 1)",
                                    textShadowRadius: 20, flex: 1, color: '#fff', fontSize: hp('2%'), fontWeight: 'bold', marginBottom: 0
                                }}
                                selectable={true}
                            >
                                C√≥ v·∫•n ƒë·ªÅ? Li√™n h·ªá macvanhien10@gmail.com
                            </Text>

                            <BannerAd
                                unitId={adUnitId}
                                size={BannerAdSize.FULL_BANNER}
                                requestOptions={{
                                    requestNonPersonalizedAdsOnly: true,
                                }}
                            />

                        </View>
                    </View>

                </ImageBackground>

            </View>
        </InternetConnectionAlert>

    );
}


